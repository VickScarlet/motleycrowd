function o(r,n){if(!Array.isArray(r))return!1;const[t,...c]=r;let e;switch(t){case"$and":e=k;break;case"$or":e=g;break;case"$not":e=l;break;case"$eq":e=f;break;case"$ne":e=d;break;case"$gt":e=m;break;case"$lt":e=h;break;case"$gte":case"$ge":e=i;break;case"$lte":case"$le":e=$;break;case"$in":e=b;break;case"$nin":e=p;break;case"$sum":case"$add":e=u;break;case"$sub":e=y;break;case"$mul":e=x;break;case"$div":e=M;break;case"$mod":e=A;break;case"$pow":e=q;break;case"$abs":e=w;break;case"$ceil":e=I;break;case"$floor":e=W;break;case"$round":e=j;break;case"$sqrt":e=z;break;case"$log":e=B;break;case"$log10":e=C;break;case"$exp":e=D;break;case"$max":e=E;break;case"$min":e=F;break;case"$avg":e=G;break;case"$inc":e=H;break;case"$dec":e=J;break}return e?e(c,n):!1}function a(r,n){if(typeof n=="string"&&n.startsWith("?")){const t=n.substring(1);return r[t]}return Array.isArray(n)&&typeof n[0]=="string"&&n[0].startsWith("$")?o(n,r):n}function k(r,n){for(const t of r)if(!o(t,n))return!1;return!0}function g(r,n){for(const t of r)if(o(t,n))return!0;return!1}function l(r,n){return!o(r,n)}function f(r,n){const[t,c]=r;return a(n,t)===a(n,c)}function d(r,n){return!f(r,n)}function m(r,n){const[t,c]=r;return a(n,t)>a(n,c)}function h(r,n){const[t,c]=r;return a(n,t)<a(n,c)}function i(r,n){const[t,c]=r;return a(n,t)>=a(n,c)}function K(r,n){return i(r,n)}function $(r,n){const[t,c]=r;return a(n,t)<=a(n,c)}function L(r,n){return $(r,n)}function b(r,n){const[t,c]=r,e=a(n,c);return Array.isArray(e)?e.includes(a(n,t)):!1}function p(r,n){return!b(r,n)}function u(r,n){let t=0;for(const c of r)t+=a(n,c);return t}function y(r,n){const[t,...c]=r;let e=a(n,t);for(const s of c)e-=a(n,s);return e}function x(r,n){let t=1;for(const c of r)t*=a(n,c);return t}function M(r,n){const[t,...c]=r;let e=a(n,t);for(const s of c)e/=a(n,s);return e}function A(r,n){const[t,c]=r;return a(n,t)%a(n,c)}function q(r,n){const[t,c]=r;return Math.pow(a(n,t),a(n,c))}function w(r,n){const[t]=r;return Math.abs(a(n,t))}function I(r,n){const[t]=r;return Math.ceil(a(n,t))}function W(r,n){const[t]=r;return Math.floor(a(n,t))}function j(r,n){const[t]=r;return Math.round(a(n,t))}function z(r,n){const[t]=r;return Math.sqrt(a(n,t))}function B(r,n){const[t]=r;return Math.log(a(n,t))}function C(r,n){const[t]=r;return Math.log10(a(n,t))}function D(r,n){const[t]=r;return Math.exp(a(n,t))}function E(r,n){let t=-1/0;for(const c of r){const e=a(n,c);e>t&&(t=e)}return t}function F(r,n){let t=1/0;for(const c of r){const e=a(n,c);e<t&&(t=e)}return t}function N(r,n){return u(r,n)}function G(r,n){return u(r,n)/r.length}function H(r,n){const[t]=r;return a(n,t)+1}function J(r,n){const[t]=r;return a(n,t)-1}export{w as $abs,u as $add,k as $and,G as $avg,I as $ceil,J as $dec,M as $div,f as $eq,D as $exp,W as $floor,i as $ge,m as $gt,K as $gte,b as $in,H as $inc,$ as $le,B as $log,C as $log10,h as $lt,L as $lte,E as $max,F as $min,A as $mod,x as $mul,d as $ne,p as $nin,l as $not,g as $or,q as $pow,j as $round,z as $sqrt,y as $sub,N as $sum,o as exec};
//# sourceMappingURL=logic.a782f78c.js.map

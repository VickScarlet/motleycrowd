{"version":3,"file":"index.cde2a256.js","sources":["../../src/functions/index.js"],"sourcesContent":["export function clone(value) {\n    if(value === null) return null;\n    if(typeof value === 'object') {\n        if(Array.isArray(value)) return value.map(v=>clone(v));\n        if(value instanceof Map) {\n            const map = new Map();\n            value.forEach((v,k)=>map.set(k,clone(v)));\n            return map;\n        }\n        if(value instanceof Set) {\n            const set = new Set();\n            value.forEach(v=>set.add(clone(v)));\n            return set;\n        }\n        if(value instanceof Date) {\n            return new Date(value);\n        }\n        const obj = {};\n        for(const key in value) obj[key] = clone(value[key]);\n        return obj;\n    }\n    return value;\n}\n\nexport function isFunction(value) {\n    return typeof value==\"function\" && !!value.constructor;\n}\n\nexport function listRandom(list) {\n    return list[Math.floor(Math.random() * list.length)];\n}\n\nexport async function delay(min, max) {\n    const time = max? Math.random() * (max - min) + min : min;\n    if(!time) return;\n    await new Promise(resolve => setTimeout(resolve, time));\n}\n\nexport function batch(bpart, time, apart) {\n    let flag = false;\n    const args = {};\n    const fn = async ()=>{\n        if(flag) return;\n        flag = true;\n        const ret = await apart?.(args);\n        await delay(time);\n        if(!flag) return;\n        bpart(ret, args);\n        flag = false;\n    }\n    Object.defineProperties(fn, {\n        flag: { get: ()=>flag, set: f=>{flag=f}},\n    });\n    return fn;\n}\n\nexport function getType(value) {\n    const name = value?.constructor?.name;\n    if(name) return name;\n    const type = Object.prototype.toString.call(value);\n    return type.substring(8, type.length - 1);\n}\n\nexport function equals(a, b) {\n    if(a===b) return true;\n    const ta = getType(a);\n    const tb = getType(b);\n    if(ta!=tb) return false;\n    switch(ta) {\n        case 'Number':\n            if(isNaN(a) && isNaN(b)) return true;\n            return a===b;\n        case 'Array':\n            if(a.length!=b.length) return false;\n            for (let i=a.length; i--;)\n                if(!equals(a[i], b[i]))\n                    return false;\n            return true;\n        case 'Object':\n            for(const key in a)\n                if(!equals(a[key], b[key]))\n                    return false;\n            return true;\n        case 'Set':\n            if(a.size!=b.size) return false;\n            const bm = new Map(b.entries());\n            for(const v of a) {\n                if(b.has(v)) return true;\n                let found = false;\n                for(const [key, value] of bm)\n                    if(equals(v, value)) {\n                        bm.delete(key);\n                        found = true;\n                        break;\n                    }\n                if(!found) return false;\n            }\n            return true;\n        case 'Map':\n            if(a.size!=b.size) return false;\n            for(const [key, value] of a)\n                if(!equals(value, b.get(key)))\n                    return false;\n            return true;\n        case 'Date':\n            return a.getTime() === b.getTime();\n        default:\n            if(a.equals) return a.equals(b);\n            return false;\n    }\n}\n\nexport function objDiff(a, b) {\n    if(a===b) return null;\n    const ta = getType(a);\n    const tb = getType(b);\n    if(ta!=tb) return clone(b);\n    if(ta!='Object') {\n        if(equals(a,b)) return null;\n        return clone(b);\n    }\n    let r = false;\n    const diff = {};\n    const keys = new Set([\n        ...Object.keys(a),\n        ...Object.keys(b),\n    ]);\n    for (const key of keys) {\n        const sa = a[key];\n        const sb = b[key];\n        if(sb==null) {\n            r = true;\n            diff[key] = null;\n            continue;\n        }\n        const sd = objDiff(sa, sb);\n        if(sd===null) continue;\n        r = true;\n        diff[key] = sd;\n    }\n    return r? diff: null;\n}\n\nexport function objUpdate(original, update) {\n    const to = getType(original);\n    const tu = getType(update);\n    if(to!=tu) return update;\n    if(to !== 'Object') return update;\n    for(const key in update) {\n        const u = update[key];\n        if(u===null) {\n            delete original[key];\n            continue;\n        }\n        original[key] = objUpdate(\n            original[key], u\n        );\n    }\n    return original;\n}\n\n/**\n * @param {any} obj\n * @param {number} [depth=Infinity]\n * @param {boolean} [flatArray=false]\n * @return {any}\n */\nexport function flat(obj, depth=Infinity, flatArray=false) {\n    const flat = (o, d)=> {\n        if( d <= 0\n            || typeof o !== 'object'\n            || Array.isArray(o) && !flatArray\n        ) return [o, false];\n\n        const r = {};\n        for (const k in o) {\n            const [v, n] = flat(o[k], d-1);\n            if(!n) {\n                r[k] = v;\n                continue;\n            }\n            for(const s in v)\n                r[`${k}.${s}`] = v[s];\n        }\n        return [r, true];\n    }\n    return flat(obj, depth+1)[0];\n}\n\nexport function format(str, values, ...args) {\n    if(!str || values==null && !args.length)\n        return str;\n    args.unshift(values);\n    if( typeof values != 'object'\n        || values instanceof String\n    ) values=args;\n    let idx = 0;\n    return str.replace(/\\{([0-9A-Za-z]*)\\}/g, (match, p1)=> {\n        if(p1 == '') p1 = idx;\n        idx ++;\n        const rep = values[p1];\n        if(rep != null) return rep;\n        const arg = args[p1];\n        if(arg != null) return arg;\n        return match;\n    });\n}"],"names":["clone","value","v","map","k","set","obj","key","isFunction","listRandom","list","delay","min","max","time","resolve","batch","bpart","apart","flag","args","fn","ret","f","getType","_a","name","type","equals","a","b","ta","tb","i","bm","found","objDiff","r","diff","keys","sa","sb","sd","objUpdate","original","update","to","tu","u","flat","depth","flatArray","d","n","s","format","str","values","idx","match","p1","rep","arg"],"mappings":"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"}